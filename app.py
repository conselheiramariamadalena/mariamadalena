import streamlit as st 
from paginas.funcoes import inicializar_firebase, obter_perfil_usuario, atualizar_perfil_usuario, login_usuario, registrar_acao_usuario
import os # Importar os

# Inicializa o Firebase
inicializar_firebase() 

st.set_page_config(
    page_title="Maria Madalena - Conselheira do Amor",  # Novo T√≠tulo
    page_icon="arquivos/avatar_assistente.jpg", # Alterado para usar o avatar do assistente
    layout='wide',                       # Melhor aproveitamento do espa√ßo
    initial_sidebar_state="expanded"
)
 
# Estilo CSS personalizado
st.markdown("""
<style>
    .login-container {
        background-color: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
        max-width: 500px;
        margin: auto;
    }
    .welcome-text {
        color: #1f1f1f;
        text-align: center;
    }
    .subtitle-text {
        color: #666;
        font-size: 1.1em;
        margin-bottom: 20px;
    }
    .terms-text {
        font-size: 0.75em;
        color: #888;
        margin-top: 15px;
        text-align: center;
        line-height: 1.4;
    }
    .terms-link {
        color: #3399FF; /* Cor azul para o link */
        text-decoration: none;
        cursor: pointer;
    }
    .terms-link:hover {
        text-decoration: underline;
    }
</style>
""", unsafe_allow_html=True)


# Verifica√ß√£o de login
if not hasattr(st.experimental_user, 'is_logged_in') or not st.experimental_user.is_logged_in:
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown('<div class="login-container">', unsafe_allow_html=True)
        
        # Logo centralizada
        st.image('arquivos/capa.jpg', width=200, use_container_width=True)
        st.markdown('<h1 class="welcome-text">üíï Maria Madalena - Conselheira do Amor üíï</h1>', unsafe_allow_html=True) # Novo Texto
        st.markdown('<p class="subtitle-text" style="text-align: center;">Fa√ßa login com sua conta Google para conversar com sua conselheira amorosa pessoal.</p>', unsafe_allow_html=True) # Novo Texto
        # Bot√£o de login
        if st.button("Login com Google", type="primary", use_container_width=True, icon=':material/login:'):
            # Registra o usu√°rio no Firestore se for o primeiro acesso (login_usuario faz isso)
            # REMOVIDO DAQUI: login_usuario() 
            st.login() # Fun√ß√£o de login do Streamlit (redireciona)
        
        # Carrega conte√∫do dos Termos para o Popover
        termos_content = "N√£o foi poss√≠vel carregar os Termos de Uso e Pol√≠tica de Privacidade."
        try:
            termos_path = os.path.join(os.path.dirname(__file__), 'termos_e_privacidade.md')
            with open(termos_path, 'r', encoding='utf-8') as file:
                termos_content = file.read()
        except Exception as e:
            print(f"Erro ao carregar termos em app.py: {e}") # Log do erro
            # Mant√©m a mensagem padr√£o de erro
            
        # Popover com os termos carregados
        with st.popover("Ao fazer login, voc√™ concorda com nossos Termos de Uso e Pol√≠tica de Privacidade", use_container_width=True):
            st.markdown(termos_content, unsafe_allow_html=True)
            
 
else:
    # Logo
    st.logo('arquivos/capa.jpg')

    # Garante que o usu√°rio est√° registrado/atualizado no Firestore ANTES de obter o perfil
    login_usuario() # ADICIONADO AQUI

    # Verifica o perfil para o flag de primeiro acesso
    perfil = obter_perfil_usuario()

    if perfil and not perfil.get("primeiro_acesso_concluido", False):
        # --- Formul√°rio de Primeiro Acesso ---
        st.title("üíï Bem-vinda √† Maria Madalena!")
        st.info("Para eu te ajudar melhor nos assuntos do cora√ß√£o, preciso conhecer voc√™ um pouquinho. Me conta sobre voc√™:")
        
        with st.form(key="primeiro_acesso_form", clear_on_submit=False):
            nome_completo = st.text_input("Como voc√™ gostaria de ser chamada(o)?", key="form_nome", placeholder="Seu nome ou apelido")
            idade = st.number_input("Qual sua idade?", min_value=16, max_value=120, key="form_idade")
            
            genero = st.selectbox("Como voc√™ se identifica quanto ao g√™nero?", [
                "Prefiro n√£o informar",
                "Mulher cisg√™nero", 
                "Homem cisg√™nero",
                "Mulher transg√™nero",
                "Homem transg√™nero", 
                "N√£o-bin√°rio",
                "Outro"
            ], key="form_genero")
            
            orientacao_sexual = st.selectbox("Qual sua orienta√ß√£o sexual?", [
                "Prefiro n√£o informar",
                "Heterossexual",
                "Homossexual",
                "Bissexual",
                "Pansexual",
                "Assexual",
                "Outro"
            ], key="form_orientacao")
            
            relacionamento_status = st.selectbox("Qual seu status de relacionamento atual?", [
                "Prefiro n√£o informar",
                "Solteira(o)",
                "Namorando",
                "Casada(o)",
                "Uni√£o est√°vel",
                "Divorciada(o)",
                "Vi√∫va(o)",
                "√â complicado"
            ], key="form_relacionamento")
            
            # Checkbox de consentimento
            st.markdown("### üíù Antes de come√ßarmos!")
            st.markdown("Sou Maria Madalena, sua conselheira amorosa pessoal! Estou aqui para te ajudar com quest√µes do cora√ß√£o, relacionamentos e autoestima. Lembre-se que sou uma IA e minhas respostas s√£o para orienta√ß√£o geral - para quest√µes mais s√©rias, sempre procure um profissional qualificado.")
            consentimento = st.checkbox("Entendo que Maria Madalena √© uma IA conselheira para orienta√ß√£o geral em assuntos amorosos e que para quest√µes mais complexas devo procurar um profissional qualificado!")
            
            # Bot√£o sempre ativo
            submitted = st.form_submit_button("Come√ßar nossa conversa! üíï", type="primary")
            
            if submitted:
                if not consentimento:
                    st.error("Querida(o), preciso que voc√™ entenda minha natureza de IA conselheira antes de come√ßarmos! ‚ù§Ô∏è")
                elif not nome_completo or not idade:
                    st.warning("Por favor, me conte pelo menos seu nome e idade para podermos conversar! üòä")
                else:
                    dados_atualizar = {
                        "nome_completo": nome_completo,
                        "idade": idade,
                        "genero": genero,
                        "orientacao_sexual": orientacao_sexual,
                        "relacionamento_status": relacionamento_status,
                        "primeiro_acesso_concluido": True,
                        "consentimento_conselheira": True
                    }
                    if atualizar_perfil_usuario(dados_atualizar):
                        st.success("Perfeito! Agora j√° posso te ajudar melhor! Voc√™ ser√° redirecionada para nossa conversa.")
                        st.balloons()
                        st.rerun() # For√ßa o recarregamento da p√°gina para sair do form
                    else:
                        st.error("Ops! Houve um probleminha ao salvar seus dados. Tenta novamente, por favor.")
    
    elif perfil: # Primeiro acesso conclu√≠do ou perfil carregado corretamente
        # --- Navega√ß√£o Principal do App ---
        
        # Define a estrutura das p√°ginas para Maria Madalena (apenas 3 p√°ginas)
        paginas = {
            "Maria Madalena": [
                st.Page("paginas/chatbot.py", title="üíï Conversar", icon='üí¨', default=True), 
            ],
            "Minha Conta": [ 
                st.Page("paginas/perfil.py", title="Meu Perfil", icon='üë§'), 
                st.Page("paginas/termos.py", title="Termos e Privacidade", icon='üìú'), 
            ]
        }

        # Usa a estrutura de p√°ginas final 
        pg = st.navigation(paginas)
        pg.run()

        # --- Bot√£o de Logout Global na Sidebar ---
        with st.sidebar:
            st.divider() # Adiciona um divisor antes do bot√£o
            if st.button("Logout",
                         key="logout_button_global", # Chave diferente para evitar conflito
                         type='secondary',
                         icon=':material/logout:',
                         use_container_width=True):
                registrar_acao_usuario("Logout", "Usu√°rio fez logout do sistema (bot√£o global)")
                st.logout()

    else: # Caso o perfil n√£o possa ser carregado ap√≥s o login
        st.error("‚ö†Ô∏è Ops! N√£o consegui carregar seu perfil. Tenta fazer login novamente?")
        if st.button("Tentar novamente", type="primary"):
            st.rerun()
 